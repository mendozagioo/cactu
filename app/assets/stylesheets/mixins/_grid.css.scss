//
// GRID
// --------------------------------------------------


@mixin grid_generator($size: 0, $gutter: 0) {
  @if $size == 0 and $gutter == 0 {
    .row {
      margin: 0 5%;
      width: 90%;
    }

    [class *= "-column"] {
      overflow: hidden;
      float: left;
      margin: 0;
      width: 100%;
    }
  }

  @else if ($size + $gutter) < 61 {
    .row {
      width: grid_size($size, $gutter);
    }

    [class *= "-column"] {
      overflow: hidden;
      float: left;
      margin: 0 gutter_columns($size, $gutter);
    }

    @for $i from 1 through $grid-max-columns {
      $col_width: (($i * $size) + (($i - 1) * $gutter));
      $sizer: grid_size($size, $gutter);
      .#{numbers($i)}-columns { width: percentage($col_width / $sizer); }
    }
  }

  @else {
    [class *= "-column"] {
      overflow: hidden;
      float: left;
      margin: 0 gutter_columns($size, $gutter);
    }

    @for $i from 1 through $grid-max-columns {
      $col_width: (($i * $size) + (($i - 1) * $gutter));
      $sizer: grid_size($size, $gutter);
      @if $i == 1 {
        .one-column { width: percentage($col_width / $sizer); }
      } @else {
        .#{numbers($i)}-columns { width: percentage($col_width / $sizer); }
    }
    }
  }
}

@mixin grid_offset($size, $gutter) {
  @for $i from 1 through $grid-max-columns - 1 {
    $offset: ($i * $size) + ($i * $gutter) + ($gutter / 2);
    $sizer: grid_size($size, $gutter);
    .offset-#{numbers($i)} { margin-left: percentage($offset / $sizer); }
  }
}

@mixin grid_centered($size: 0, $gutter: 0) {
  @for $i from 1 through $grid-max-columns - 1 {
    $col_width: ($i * $size) + (($i - 1) * $gutter);
    $sizer: grid_size($size, $gutter);
    $marger: ($sizer - $col_width) / 2;
    .centered-#{numbers($i)} {
      //margin_lr: percentage($marger / $sizer);
      margin: 0 percentage($marger / $sizer);
    }
  }
}
